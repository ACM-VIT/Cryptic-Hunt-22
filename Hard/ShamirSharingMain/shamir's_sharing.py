# -*- coding: utf-8 -*-
"""Shamir's sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvi7-N3VKjUlboazh5Wpk56TMj1enTIl
"""

### Shamir's Secret Sharing
# Author: Saharsh Bhansali

import matplotlib.pyplot as plt
import numpy as np

n1 = -100000
n2 = 100000
n3 = 10000

# n linearly spaced numbers
x = np.linspace(n1,n2,n3)

# the function, which is a 3rd degree function is here
a = -237
b = 453
c = -342
d = 134_004_056_463_086_560
y = a*x**3 + b*x**2 + c*x + d

# setting the axes at the centre
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.spines['left'].set_position('center')
ax.spines['bottom'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

# plot the function
plt.plot(x,y, 'r')

# show the plot
plt.show()

'''

d - when Encoded in base 64 : MTM0LDAwNCwwNTYsNDYzLDA4Niw1NjA=
a, b and c are up to us.
d = 134,004,056,463,086,560

a degree 3 polyonmial can be created with a minimum of 4 points (unique or non-unique)
The threshold for this one is 4 and the number of shares can be any number of points we want to use - 6 for now

f = ax^3 + bx^2 + cx + d 

we shall try to use base64 for everything, from plotting to encoding the points to all the other math

worst case, we do everything in base 10 and then encode to base 64 for ease of communication

'''